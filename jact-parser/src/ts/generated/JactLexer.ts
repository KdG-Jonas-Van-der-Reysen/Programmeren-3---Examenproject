// Generated from Jact.g4 by ANTLR 4.13.1
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class JactLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly T__9 = 10;
	public static readonly T__10 = 11;
	public static readonly T__11 = 12;
	public static readonly T__12 = 13;
	public static readonly T__13 = 14;
	public static readonly T__14 = 15;
	public static readonly T__15 = 16;
	public static readonly T__16 = 17;
	public static readonly T__17 = 18;
	public static readonly T__18 = 19;
	public static readonly T__19 = 20;
	public static readonly T__20 = 21;
	public static readonly T__21 = 22;
	public static readonly T__22 = 23;
	public static readonly ID = 24;
	public static readonly INT = 25;
	public static readonly FLOAT = 26;
	public static readonly BOOL = 27;
	public static readonly STRING = 28;
	public static readonly WS = 29;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "';'", 
                                                            "'lotzien'", 
                                                            "'('", "')'", 
                                                            "'kbentkwijt '", 
                                                            "'+'", "'-'", 
                                                            "'*'", "'/'", 
                                                            "'%'", "' '", 
                                                            "':'", "' = '", 
                                                            "'tzitvast'", 
                                                            "'tisvrij'", 
                                                            "'tisoud'", 
                                                            "'doenekeeriet '", 
                                                            "') {'", "'}'", 
                                                            "','", "'nummerke'", 
                                                            "'jaofnee'", 
                                                            "'tekstje'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             null, null, 
                                                             "ID", "INT", 
                                                             "FLOAT", "BOOL", 
                                                             "STRING", "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "ID", "INT", "FLOAT", 
		"BOOL", "STRING", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, JactLexer._ATN, JactLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Jact.g4"; }

	public get literalNames(): (string | null)[] { return JactLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return JactLexer.symbolicNames; }
	public get ruleNames(): string[] { return JactLexer.ruleNames; }

	public get serializedATN(): number[] { return JactLexer._serializedATN; }

	public get channelNames(): string[] { return JactLexer.channelNames; }

	public get modeNames(): string[] { return JactLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,29,218,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,1,0,1,0,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
	4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,
	12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
	1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,
	16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,
	1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,
	20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
	1,22,1,22,1,23,4,23,176,8,23,11,23,12,23,177,1,24,4,24,181,8,24,11,24,12,
	24,182,1,25,4,25,186,8,25,11,25,12,25,187,1,25,1,25,4,25,192,8,25,11,25,
	12,25,193,1,26,1,26,1,26,1,26,1,26,3,26,201,8,26,1,27,1,27,5,27,205,8,27,
	10,27,12,27,208,9,27,1,27,1,27,1,28,4,28,213,8,28,11,28,12,28,214,1,28,
	1,28,1,206,0,29,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
	12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
	24,49,25,51,26,53,27,55,28,57,29,1,0,3,2,0,65,90,97,122,1,0,48,57,3,0,9,
	10,13,13,32,32,224,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,
	1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
	0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,
	1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
	0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,
	1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,61,1,0,0,0,5,69,1,0,0,
	0,7,71,1,0,0,0,9,73,1,0,0,0,11,85,1,0,0,0,13,87,1,0,0,0,15,89,1,0,0,0,17,
	91,1,0,0,0,19,93,1,0,0,0,21,95,1,0,0,0,23,97,1,0,0,0,25,99,1,0,0,0,27,103,
	1,0,0,0,29,112,1,0,0,0,31,120,1,0,0,0,33,127,1,0,0,0,35,141,1,0,0,0,37,
	145,1,0,0,0,39,147,1,0,0,0,41,149,1,0,0,0,43,158,1,0,0,0,45,166,1,0,0,0,
	47,175,1,0,0,0,49,180,1,0,0,0,51,185,1,0,0,0,53,200,1,0,0,0,55,202,1,0,
	0,0,57,212,1,0,0,0,59,60,5,59,0,0,60,2,1,0,0,0,61,62,5,108,0,0,62,63,5,
	111,0,0,63,64,5,116,0,0,64,65,5,122,0,0,65,66,5,105,0,0,66,67,5,101,0,0,
	67,68,5,110,0,0,68,4,1,0,0,0,69,70,5,40,0,0,70,6,1,0,0,0,71,72,5,41,0,0,
	72,8,1,0,0,0,73,74,5,107,0,0,74,75,5,98,0,0,75,76,5,101,0,0,76,77,5,110,
	0,0,77,78,5,116,0,0,78,79,5,107,0,0,79,80,5,119,0,0,80,81,5,105,0,0,81,
	82,5,106,0,0,82,83,5,116,0,0,83,84,5,32,0,0,84,10,1,0,0,0,85,86,5,43,0,
	0,86,12,1,0,0,0,87,88,5,45,0,0,88,14,1,0,0,0,89,90,5,42,0,0,90,16,1,0,0,
	0,91,92,5,47,0,0,92,18,1,0,0,0,93,94,5,37,0,0,94,20,1,0,0,0,95,96,5,32,
	0,0,96,22,1,0,0,0,97,98,5,58,0,0,98,24,1,0,0,0,99,100,5,32,0,0,100,101,
	5,61,0,0,101,102,5,32,0,0,102,26,1,0,0,0,103,104,5,116,0,0,104,105,5,122,
	0,0,105,106,5,105,0,0,106,107,5,116,0,0,107,108,5,118,0,0,108,109,5,97,
	0,0,109,110,5,115,0,0,110,111,5,116,0,0,111,28,1,0,0,0,112,113,5,116,0,
	0,113,114,5,105,0,0,114,115,5,115,0,0,115,116,5,118,0,0,116,117,5,114,0,
	0,117,118,5,105,0,0,118,119,5,106,0,0,119,30,1,0,0,0,120,121,5,116,0,0,
	121,122,5,105,0,0,122,123,5,115,0,0,123,124,5,111,0,0,124,125,5,117,0,0,
	125,126,5,100,0,0,126,32,1,0,0,0,127,128,5,100,0,0,128,129,5,111,0,0,129,
	130,5,101,0,0,130,131,5,110,0,0,131,132,5,101,0,0,132,133,5,107,0,0,133,
	134,5,101,0,0,134,135,5,101,0,0,135,136,5,114,0,0,136,137,5,105,0,0,137,
	138,5,101,0,0,138,139,5,116,0,0,139,140,5,32,0,0,140,34,1,0,0,0,141,142,
	5,41,0,0,142,143,5,32,0,0,143,144,5,123,0,0,144,36,1,0,0,0,145,146,5,125,
	0,0,146,38,1,0,0,0,147,148,5,44,0,0,148,40,1,0,0,0,149,150,5,110,0,0,150,
	151,5,117,0,0,151,152,5,109,0,0,152,153,5,109,0,0,153,154,5,101,0,0,154,
	155,5,114,0,0,155,156,5,107,0,0,156,157,5,101,0,0,157,42,1,0,0,0,158,159,
	5,106,0,0,159,160,5,97,0,0,160,161,5,111,0,0,161,162,5,102,0,0,162,163,
	5,110,0,0,163,164,5,101,0,0,164,165,5,101,0,0,165,44,1,0,0,0,166,167,5,
	116,0,0,167,168,5,101,0,0,168,169,5,107,0,0,169,170,5,115,0,0,170,171,5,
	116,0,0,171,172,5,106,0,0,172,173,5,101,0,0,173,46,1,0,0,0,174,176,7,0,
	0,0,175,174,1,0,0,0,176,177,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
	48,1,0,0,0,179,181,7,1,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,180,1,0,
	0,0,182,183,1,0,0,0,183,50,1,0,0,0,184,186,7,1,0,0,185,184,1,0,0,0,186,
	187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,189,1,0,0,0,189,191,5,46,
	0,0,190,192,7,1,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,
	194,1,0,0,0,194,52,1,0,0,0,195,196,5,106,0,0,196,201,5,97,0,0,197,198,5,
	110,0,0,198,199,5,101,0,0,199,201,5,101,0,0,200,195,1,0,0,0,200,197,1,0,
	0,0,201,54,1,0,0,0,202,206,5,34,0,0,203,205,9,0,0,0,204,203,1,0,0,0,205,
	208,1,0,0,0,206,207,1,0,0,0,206,204,1,0,0,0,207,209,1,0,0,0,208,206,1,0,
	0,0,209,210,5,34,0,0,210,56,1,0,0,0,211,213,7,2,0,0,212,211,1,0,0,0,213,
	214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,216,1,0,0,0,216,217,6,28,
	0,0,217,58,1,0,0,0,8,0,177,182,187,193,200,206,214,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JactLexer.__ATN) {
			JactLexer.__ATN = new ATNDeserializer().deserialize(JactLexer._serializedATN);
		}

		return JactLexer.__ATN;
	}


	static DecisionsToDFA = JactLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}